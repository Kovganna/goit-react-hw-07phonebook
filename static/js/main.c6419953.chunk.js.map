{"version":3,"sources":["components/ContactList/ContactList.module.css","components/Filter/Filter.module.css","components/ContactForm/ContactForm.module.css","redux/contacts/selectors.js","redux/contacts/operations.js","components/ContactForm/ContactForm.js","redux/contacts/actions.js","components/Filter/Filter.js","components/ContactList/ContactList.js","components/App/App.js","redux/contacts/reducers.js","redux/store.js","index.js"],"names":["module","exports","getContacts","state","contacts","contactList","getFilter","contactFilter","getFilteredContacts","lowerCasedFilter","toLowerCase","filter","name","includes","axios","defaults","baseURL","addContact","createAsyncThunk","contact","a","rejectWithValue","post","data","_","get","console","log","contactId","delete","id","ContactForm","useState","setName","number","setNumber","useSelector","dispatch","useDispatch","handleChange","e","target","value","reset","className","s","contact__form","input__form","onSubmit","preventDefault","find","elem","alert","input__title","type","pattern","title","required","input__name","onChange","input__number","btn__add","addContactsRequest","createAction","addContactsSuccess","addContactsError","removeContact","payload","nanoid","filterContacts","Filter","filter__container","filter__title","filter__input","ContactList","map","contact__item","item","onClick__btn","onClick","App","createReducer","action","persistConfig","key","version","storage","blacklist","contactReducer","combineReducers","store","configureStore","reducer","persistReducer","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","concat","logger","persistor","persistStore","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.c6419953.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"ContactList_item__zhI6M\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"filter__container\":\"Filter_filter__container__3DoeI\",\"filter__input\":\"Filter_filter__input__2Zl-e\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contact__form\":\"ContactForm_contact__form__1T46H\",\"input__number\":\"ContactForm_input__number__3YrWD\",\"input__name\":\"ContactForm_input__name__1R_M_\",\"input__title\":\"ContactForm_input__title__25Lk2\",\"btn__add\":\"ContactForm_btn__add__2ogHF\"};","export const getContacts = state => state.contacts.contactList;\r\n\r\nexport const getFilter = state => state.contacts.contactFilter;\r\n\r\nexport const getFilteredContacts = state => {\r\n  const lowerCasedFilter = getFilter(state).toLowerCase();\r\n  return getContacts(state).filter(({ name }) =>\r\n    name.toLowerCase().includes(lowerCasedFilter),\r\n  );\r\n};\r\n","import { createAsyncThunk } from '@reduxjs/toolkit';\r\nimport axios from 'axios';\r\n\r\naxios.defaults.baseURL = 'https://6198e96a164fa60017c2321d.mockapi.io';\r\n\r\nexport const addContact = createAsyncThunk(\r\n  'contacts/addContacts',\r\n  async (contact, { rejectWithValue }) => {\r\n    try {\r\n      const { data } = await axios.post('/contacts', contact);\r\n      return data;\r\n      // console.log(data);\r\n    } catch (error) {\r\n      rejectWithValue(error);\r\n    }\r\n  },\r\n);\r\n\r\nexport const fetchContacts = createAsyncThunk(\r\n  'contacts/fetchContacts',\r\n  async (_, { rejectWithValue }) => {\r\n    try {\r\n      const { data } = await axios.get(`/contacts`);\r\n      // return data;\r\n      console.log(data);\r\n    } catch (error) {\r\n      rejectWithValue(error);\r\n    }\r\n  },\r\n);\r\n\r\nexport const removeContact = createAsyncThunk(\r\n  'contacts/removeContact',\r\n  async (contactId, { rejectWithValue }) => {\r\n    try {\r\n      const {\r\n        data: { id },\r\n      } = await axios.delete(`/contacts/${contactId}`);\r\n      return id;\r\n    } catch (error) {\r\n      rejectWithValue(error);\r\n    }\r\n  },\r\n);\r\n","import { useState } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport { getContacts } from '../../redux/contacts/selectors';\r\nimport { addContact } from '../../redux/contacts/operations';\r\n\r\nimport s from './ContactForm.module.css';\r\n\r\nexport default function ContactForm() {\r\n  const [name, setName] = useState('');\r\n  const [number, setNumber] = useState('');\r\n\r\n  const contacts = useSelector(getContacts);\r\n  const dispatch = useDispatch();\r\n\r\n  const handleChange = e => {\r\n    const { name, value } = e.target;\r\n    switch (name) {\r\n      case 'name':\r\n        setName(value);\r\n        break;\r\n      case 'number':\r\n        setNumber(value);\r\n        break;\r\n\r\n      default:\r\n        return;\r\n    }\r\n  };\r\n\r\n  const handleSubmit = e => {\r\n    e.preventDefault();\r\n\r\n    const allReadyPresentContact = contacts.find(\r\n      elem => elem.name.toLowerCase() === name.toLowerCase(),\r\n    );\r\n\r\n    if (allReadyPresentContact) {\r\n      alert(`${name} is already in contacts.`);\r\n    } else {\r\n      dispatch(addContact({ name, number }));\r\n    }\r\n    reset();\r\n  };\r\n\r\n  const reset = () => {\r\n    setName('');\r\n    setNumber('');\r\n  };\r\n\r\n  return (\r\n    <div className={s.contact__form}>\r\n      <form className={s.input__form} onSubmit={handleSubmit}>\r\n        <label>\r\n          <span className={s.input__title}>Name</span>\r\n          <input\r\n            type=\"text\"\r\n            name=\"name\"\r\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n            required\r\n            className={s.input__name}\r\n            value={name}\r\n            onChange={handleChange}\r\n          />\r\n        </label>\r\n        <label>\r\n          <span className={s.input__title}>Number</span>\r\n          <input\r\n            type=\"tel\"\r\n            name=\"number\"\r\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n            required\r\n            className={s.input__number}\r\n            value={number}\r\n            onChange={handleChange}\r\n          />\r\n        </label>\r\n        <button type=\"submit\" className={s.btn__add}>\r\n          Add contact\r\n        </button>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nContactForm.propTypes = {\r\n  name: PropTypes.string,\r\n  number: PropTypes.number,\r\n  handleChange: PropTypes.func,\r\n  handleSubmit: PropTypes.func,\r\n};\r\n","import { createAction, nanoid } from '@reduxjs/toolkit';\r\n\r\n// pending\r\nexport const addContactsRequest = createAction('addContacts/request');\r\n// resolved\r\nexport const addContactsSuccess = createAction('addContacts/success');\r\n// rejected\r\nexport const addContactsError = createAction('addContacts/error');\r\n\r\nexport const addContact = createAction('contact/add', ({ name, number }) => ({\r\n  payload: {\r\n    id: nanoid(),\r\n    name,\r\n    number,\r\n  },\r\n}));\r\nexport const removeContact = createAction('contact/delete');\r\nexport const filterContacts = createAction('contact/filter');\r\n","// import PropTypes from 'prop-types';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { filterContacts } from '../../redux/contacts/actions';\r\nimport { getFilter } from '../../redux/contacts/selectors';\r\nimport s from './Filter.module.css';\r\n\r\nconst Filter = () => {\r\n  const filter = useSelector(getFilter);\r\n  const dispatch = useDispatch();\r\n\r\n  const handleFilterChange = e => {\r\n    dispatch(filterContacts(e.target.value)); // отправляем значение в redux\r\n  };\r\n\r\n  return (\r\n    <div className={s.filter__container}>\r\n      <label className={s.filter__title}>\r\n        Find contacts by name\r\n        <input\r\n          className={s.filter__input}\r\n          type=\"text\"\r\n          value={filter}\r\n          name=\"name\"\r\n          onChange={handleFilterChange}\r\n        />\r\n      </label>\r\n    </div>\r\n  );\r\n};\r\n\r\n// Filter.propTypes = {\r\n//   filter: PropTypes.string.isRequired,\r\n//   handleFilterChange: PropTypes.func.isRequired,\r\n// };\r\n\r\nexport default Filter;\r\n","import { removeContact } from '../../redux/contacts/actions';\r\nimport s from './ContactList.module.css';\r\n\r\nimport { getFilteredContacts } from '../../redux/contacts/selectors';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\nimport { useEffect } from 'react';\r\n\r\nexport default function ContactList() {\r\n  const contacts = useSelector(getFilteredContacts);\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <div>\r\n      <ul className=\"contact-list\">\r\n        {contacts.map(({ name, number, id }) => (\r\n          <li key={id} className={s.contact__item}>\r\n            <p className={s.item}>{name}:</p>\r\n            <p className={s.item}>{number}</p>\r\n            <button\r\n              key={id}\r\n              type=\"button\"\r\n              className={s.onClick__btn}\r\n              onClick={() => dispatch(removeContact(id))}\r\n            >\r\n              Delete\r\n            </button>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n","import './App.css';\r\nimport ContactForm from '../ContactForm/ContactForm';\r\nimport Filter from '../Filter/Filter';\r\nimport ContactList from '../ContactList/ContactList';\r\n\r\nexport default function App() {\r\n  return (\r\n    <div className=\"Container\">\r\n      <h1>Phonebook</h1>\r\n      <ContactForm />\r\n      <h2>Contacts</h2>\r\n      <Filter />\r\n      <ContactList />\r\n    </div>\r\n  );\r\n}\r\n","import { createReducer } from '@reduxjs/toolkit';\r\n// import dataContacts from '../../fileJson/contacts.json';\r\nimport {\r\n  addContactsRequest,\r\n  addContactsSuccess,\r\n  addContactsError,\r\n  filterContacts,\r\n} from './actions';\r\n\r\nexport const contactList = createReducer([], {\r\n  [addContactsRequest]: (state, { payload }) => [...state, payload],\r\n  [addContactsSuccess]: (state, { payload }) =>\r\n    state.filter(({ id }) => id !== payload),\r\n  [addContactsError]: (_, action) => action.payload,\r\n});\r\n\r\nexport const contactFilter = createReducer('', {\r\n  [filterContacts]: (_, { payload }) => payload,\r\n});\r\n\r\n// export const contacts = createReducer([], {\r\n//   [getContactsSuccess]: (state, action) => {\r\n//     return [...state, ...action.payload];\r\n//   },\r\n// });\r\n\r\n// export const loading = createReducer(false, {\r\n//   [getContactsRequest]: (_, action) => true,\r\n// });\r\n\r\n// export const error = createReducer(null, {\r\n//   [getContactsError]: (_, action) => action.payload,\r\n// });\r\n","import { combineReducers } from 'redux';\r\nimport { configureStore } from '@reduxjs/toolkit';\r\nimport { contactList, contactFilter } from './contacts/reducers';\r\n\r\nimport logger from 'redux-logger';\r\n\r\nimport {\r\n  persistStore,\r\n  persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from 'redux-persist';\r\n\r\nimport storage from 'redux-persist/lib/storage';\r\n\r\nconst persistConfig = {\r\n  key: 'contacts',\r\n  version: 1,\r\n  storage,\r\n  blacklist: ['contactFilter'],\r\n};\r\n\r\nconst contactReducer = combineReducers({ contactList, contactFilter });\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    contacts: persistReducer(persistConfig, contactReducer),\r\n  },\r\n  middleware: getDefaultMiddleware =>\r\n    getDefaultMiddleware({\r\n      serializableCheck: {\r\n        ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n      },\r\n    }).concat(logger),\r\n});\r\n\r\nexport const persistor = persistStore(store);\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\n//импорт компонента Provider\nimport { Provider } from 'react-redux';\n//импорт глобального состояния\nimport { store, persistor } from './redux/store';\n//импорт компонента PersistGate\nimport { PersistGate } from 'redux-persist/integration/react';\n\nReactDOM.render(\n  <React.StrictMode>\n    <PersistGate persistor={persistor} loading={null}>\n      <Provider store={store}>\n        <App />\n      </Provider>\n    </PersistGate>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}