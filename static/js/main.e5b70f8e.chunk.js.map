{"version":3,"sources":["components/Filter/Filter.module.css","redux/contacts/selectors.js","redux/contacts/actions.js","components/ContactForm/ContactForm.js","components/Filter/Filter.js","components/ContactList/ContactList.js","components/App/App.js","redux/contacts/reducers.js","redux/store.js","index.js","components/ContactForm/ContactForm.module.css","components/ContactList/ContactList.module.css"],"names":["module","exports","getContacts","state","contacts","contactList","getFilter","contactFilter","getFilteredContacts","lowerCasedFilter","toLowerCase","filter","name","includes","addContact","createAction","number","payload","id","nanoid","removeContact","filterContacts","ContactForm","useState","setName","setNumber","useSelector","dispatch","useDispatch","handleChange","e","target","value","reset","className","s","contact__form","input__form","onSubmit","preventDefault","find","elem","alert","input__title","type","pattern","title","required","input__name","onChange","input__number","btn__add","Filter","filter__container","filter__title","filter__input","ContactList","map","contact__item","item","onClick__btn","onClick","App","createReducer","dataContacts","_","persistConfig","key","version","storage","blacklist","contactReducer","combineReducers","store","configureStore","reducer","persistReducer","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","concat","logger","persistor","persistStore","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.e5b70f8e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"filter__container\":\"Filter_filter__container__3DoeI\",\"filter__input\":\"Filter_filter__input__2Zl-e\"};","export const getContacts = state => state.contacts.contactList;\n\nexport const getFilter = state => state.contacts.contactFilter;\n\nexport const getFilteredContacts = state => {\n  const lowerCasedFilter = getFilter(state).toLowerCase();\n  return getContacts(state).filter(({ name }) =>\n    name.toLowerCase().includes(lowerCasedFilter),\n  );\n};\n","import { createAction, nanoid } from '@reduxjs/toolkit';\n\nexport const addContact = createAction('contact/add', ({ name, number }) => ({\n  payload: {\n    id: nanoid(),\n    name,\n    number,\n  },\n}));\nexport const removeContact = createAction('contact/delete');\nexport const filterContacts = createAction('contact/filter');\n\n// export const addContact = contact => ({\n//   type: 'contact/add',\n//   payload: contact,\n// });\n\n// export const removeContact = id => ({\n//   type: 'contact/delete',\n//   payload: { id },\n// });\n\n// export const filterContacts = value => ({\n//   type: 'contact/filter',\n//   payload: value,\n// })\n","import { useState } from 'react';\n// import { connect } from 'react-redux';\nimport { useSelector, useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\n// import { v4 as uuidv4 } from 'uuid';\nimport { getContacts } from '../../redux/contacts/selectors';\nimport { addContact } from '../../redux/contacts/actions';\n\nimport s from './ContactForm.module.css';\n\nexport default function ContactForm() {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const contacts = useSelector(getContacts);\n  const dispatch = useDispatch();\n\n  const handleChange = e => {\n    const { name, value } = e.target;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    // const contact = {\n    //   id: uuidv4(),\n    //   name,\n    //   number,\n    // };\n\n    const allReadyPresentContact = contacts.find(\n      elem => elem.name.toLowerCase() === name.toLowerCase(),\n    );\n\n    if (allReadyPresentContact) {\n      alert(`${name} is already in contacts.`);\n    } else {\n      // onSubmit(contact);\n\n      // onAdd(contact); //диспатчим contact в redux\n      dispatch(addContact({ name, number }));\n    }\n    reset();\n  };\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <div className={s.contact__form}>\n      <form className={s.input__form} onSubmit={handleSubmit}>\n        <label>\n          <span className={s.input__title}>Name</span>\n          <input\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n            required\n            className={s.input__name}\n            value={name}\n            onChange={handleChange}\n          />\n        </label>\n        <label>\n          <span className={s.input__title}>Number</span>\n          <input\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n            required\n            className={s.input__number}\n            value={number}\n            onChange={handleChange}\n          />\n        </label>\n        <button type=\"submit\" className={s.btn__add}>\n          Add contact\n        </button>\n      </form>\n    </div>\n  );\n}\n\nContactForm.propTypes = {\n  name: PropTypes.string,\n  number: PropTypes.number,\n  handleChange: PropTypes.func,\n  handleSubmit: PropTypes.func,\n  //nameInputId: PropTypes.string,\n  //numberInputId: PropTypes.string,\n};\n\n// const mapStateToProps = state => {\n//   return {\n//     contactsList: state.contacts,\n//   };\n// };\n// const mapDispatchToProps = dispatch => {\n//   return {\n//     onnAdd: contact => dispatch(addContact(contact)),\n//   };\n// };\n\n// export default connect(null, mapDispatchToProps)(ContactForm);\n","// import PropTypes from 'prop-types';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { filterContacts } from '../../redux/contacts/actions';\nimport { getFilter } from '../../redux/contacts/selectors';\nimport s from './Filter.module.css';\n\nconst Filter = () => {\n  const filter = useSelector(getFilter);\n  const dispatch = useDispatch();\n\n  const handleFilterChange = e => {\n    dispatch(filterContacts(e.target.value)); // отправляем значение в redux\n  };\n\n  return (\n    <div className={s.filter__container}>\n      <label className={s.filter__title}>\n        Find contacts by name\n        <input\n          className={s.filter__input}\n          type=\"text\"\n          value={filter}\n          name=\"name\"\n          onChange={handleFilterChange}\n        />\n      </label>\n    </div>\n  );\n};\n\n// Filter.propTypes = {\n//   filter: PropTypes.string.isRequired,\n//   handleFilterChange: PropTypes.func.isRequired,\n// };\n\nexport default Filter;\n","import { removeContact } from '../../redux/contacts/actions';\nimport s from './ContactList.module.css';\n// import PropTypes from 'prop-types';\n// import { connect } from 'react-redux';\nimport { getFilteredContacts } from '../../redux/contacts/selectors';\nimport { useSelector, useDispatch } from 'react-redux';\n\nexport default function ContactList() {\n  const contacts = useSelector(getFilteredContacts);\n  const dispatch = useDispatch();\n\n  return (\n    <div>\n      <ul className=\"contact-list\">\n        {contacts.map(({ name, number, id }) => (\n          <li key={id} className={s.contact__item}>\n            <p className={s.item}>{name}:</p>\n            <p className={s.item}>{number}</p>\n            <button\n              key={id}\n              type=\"button\"\n              className={s.onClick__btn}\n              onClick={() => dispatch(removeContact(id))}\n            >\n              Delete\n            </button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n\n// function ContactList({ contacts, deleteContact }) {\n//   return (\n//     <div>\n//       <ul className=\"contact-list\">\n//         {contacts.map(({ name, number, id }) => (\n//           <li key={id} className={s.contact__item}>\n//             <p className={s.item}>{name}:</p>\n//             <p className={s.item}>{number}</p>\n//             <button\n//               key={id}\n//               type=\"button\"\n//               className={s.onClick__btn}\n//               onClick={() => deleteContact(id)}\n//             >\n//               Delete\n//             </button>\n//           </li>\n//         ))}\n//       </ul>\n//     </div>\n//   );\n// }\n\n// const mapStateToProps = state => {\n//   return {\n//     contacts: state.contacts,\n//   };\n// };\n// const mapDispatchToProps = dispatch => {\n//   return {\n//     deleteContact: id => dispatch(removeContact(id)),\n//   };\n// };\n\n// ContactList.propTypes = {\n//   contacts: PropTypes.arrayOf(\n//     PropTypes.shape({\n//       name: PropTypes.string.isRequired,\n//       number: PropTypes.string.isRequired,\n//       id: PropTypes.string.isRequired,\n//     }),\n//   ),\n//   deleteContact: PropTypes.func.isRequired,\n// };\n\n// export default connect(mapStateToProps, mapDispatchToProps)(ContactList);\n","// import { useState, useEffect } from 'react';\nimport './App.css';\nimport ContactForm from '../ContactForm/ContactForm';\nimport Filter from '../Filter/Filter';\nimport ContactList from '../ContactList/ContactList';\n// import dataContacts from '../../fileJson/contacts.json';\n\nexport default function App() {\n  // const [contacts, setContacts] = useState(dataContacts);\n  // const [filter, setFilter] = useState('');\n\n  // useEffect(() => {\n  //   const parsedContacts = JSON.parse(localStorage.getItem('contacts'));\n  //   if (parsedContacts) {\n  //     setContacts(parsedContacts);\n  //   }\n  // }, []);\n\n  // useEffect(() => {\n  //   localStorage.setItem('contacts', JSON.stringify(contacts));\n  // }, [contacts]);\n\n  // const formSubmitHandler = data => {\n  //   const allReadyPresentContact = contacts.some(\n  //     elem => elem.name.toLowerCase() === data.name.toLowerCase(),\n  //   );\n\n  //   if (allReadyPresentContact) {\n  //     return alert(`${data.name} is already in contacts.`);\n  //   }\n\n  //   setContacts([...contacts, data]);\n  // };\n\n  // const handleFilterChange = e => {\n  //   setFilter(e.target.value); // сетим локально\n  // };\n\n  // const handleFilterContact = () => {\n  //   const filterContact = filter.toLowerCase();\n\n  //   return contacts.filter(contact =>\n  //     contact.name.toLowerCase().includes(filterContact),\n  //   );\n  // };\n\n  // const delContact = id => {\n  //   setContacts(contacts.filter(contact => contact.id !== id));\n  // };\n\n  // return (\n  //   <div className=\"Container\">\n  //     <h1>Phonebook</h1>\n  //     <ContactForm onSubmit={formSubmitHandler} />\n  //     <h2>Contacts</h2>\n  //     <Filter filter={filter} onChange={handleFilterChange} />\n  //     <ContactList\n  //       contacts={handleFilterContact()}\n  //       deleteContact={delContact}\n  //     />\n  //   </div>\n  // );\n\n  return (\n    <div className=\"Container\">\n      <h1>Phonebook</h1>\n      <ContactForm />\n      <h2>Contacts</h2>\n      <Filter />\n      <ContactList />\n    </div>\n  );\n}\n","import { createReducer } from '@reduxjs/toolkit';\nimport dataContacts from '../../fileJson/contacts.json';\nimport { addContact, removeContact, filterContacts } from './actions';\n\n// const initState = [{ dataContacts }];\n\n// const contactList = (state = initState, action) => {\n//   switch (action.type) {\n//     case 'contact/add':\n//       return [...state, action.payload];\n\n//     case 'contact/delete':\n//       return state.filter(contact => contact.id !== action.payload.id);\n\n//     default:\n//       return state;\n//   }\n// };\n\n// const contactFilter = (state = '', { payload }) => {\n//   return payload;\n// };\n\nexport const contactList = createReducer(dataContacts, {\n  [addContact]: (state, { payload }) => [...state, payload],\n  [removeContact]: (state, { payload }) =>\n    state.filter(({ id }) => id !== payload),\n});\n\nexport const contactFilter = createReducer('', {\n  [filterContacts]: (_, { payload }) => payload,\n});\n","// import { createStore } from 'redux';\n// import { composeWithDevTools } from 'redux-devtools-extension';\n// export const store = createStore(contactReducer, composeWithDevTools());\nimport { combineReducers } from 'redux';\nimport { contactList, contactFilter } from './contacts/reducers';\nimport { configureStore } from '@reduxjs/toolkit';\n\nimport logger from 'redux-logger';\n\nimport {\n  persistStore,\n  persistReducer,\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from 'redux-persist';\n\nimport storage from 'redux-persist/lib/storage';\n\nconst persistConfig = {\n  key: 'contacts',\n  version: 1,\n  storage,\n  blacklist: ['contactFilter'],\n};\n\nconst contactReducer = combineReducers({\n  contactList,\n  contactFilter,\n});\n\nexport const store = configureStore({\n  reducer: {\n    contacts: persistReducer(persistConfig, contactReducer),\n  },\n  middleware: getDefaultMiddleware =>\n    getDefaultMiddleware({\n      serializableCheck: {\n        ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n      },\n    }).concat(logger),\n});\n\nexport const persistor = persistStore(store);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\n//импорт компонента Provider\nimport { Provider } from 'react-redux';\n//импорт глобального состояния\nimport { store, persistor } from './redux/store';\n//импорт компонента PersistGate\nimport { PersistGate } from 'redux-persist/integration/react';\n\nReactDOM.render(\n  <React.StrictMode>\n    <PersistGate persistor={persistor} loading={null}>\n      <Provider store={store}>\n        <App />\n      </Provider>\n    </PersistGate>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contact__form\":\"ContactForm_contact__form__1T46H\",\"input__number\":\"ContactForm_input__number__3YrWD\",\"input__name\":\"ContactForm_input__name__1R_M_\",\"input__title\":\"ContactForm_input__title__25Lk2\",\"btn__add\":\"ContactForm_btn__add__2ogHF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"ContactList_item__zhI6M\"};"],"sourceRoot":""}